import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { FaHome, FaUsers, FaClipboardList, FaChartBar, FaSignOutAlt, FaBars, FaTimes, FaGraduationCap } from "react-icons/fa";
import ManageStudents from "./manageStudent";
import ApplicationsReview from "./application";
import Reports from "./reports";
// Remove or keep './admindashboard.css' if you have custom styles; this uses Tailwind for responsiveness and enhanced animations

function AdminDashboard() {
  const [activePage, setActivePage] = useState("home");
  const [isMenuOpen, setIsMenuOpen] = useState(false); // For mobile hamburger toggle
  const [stats, setStats] = useState({
    totalStudents: 0,
    totalInternships: 0,
    totalInternshipsApplied: 0,
    pendingApplications: 0,
    acceptedApplications: 0,
    rejectedApplications: 0,
    completedApplications: 0, // New stat for completed applications/users (fetched from backend)
  });
  const [isLoadingStats, setIsLoadingStats] = useState(true); // For skeleton animation
  const navigate = useNavigate();

  // Close mobile menu on route change or Escape key
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') setIsMenuOpen(false);
    };
    document.addEventListener('keydown', handleEscape);
    return () => document.removeEventListener('keydown', handleEscape);
  }, []);

  // Protected route
  useEffect(() => {
    const token = localStorage.getItem("token");
    const role = localStorage.getItem("role");
    if (!token || role !== "Admin") {
      navigate("/login");
    } else {
      fetchStats();
    }
  }, [navigate]);

  // Logout
  const handleLogout = () => {
    if (!window.confirm('Are you sure you want to logout?')) return;
    localStorage.removeItem("token");
    localStorage.removeItem("role");
    localStorage.removeItem("isLoggedIn");
    localStorage.removeItem("username");
    setIsMenuOpen(false);
    navigate("/login");
  };

  const toggleMenu = () => setIsMenuOpen(!isMenuOpen);
  const closeMenu = () => setIsMenuOpen(false);

  // Fetch stats from backend (including completed applications)
  const fetchStats = async () => {
    try {
      setIsLoadingStats(true);
      const token = localStorage.getItem("token");
      const res = await fetch("http://localhost:5000/api/admin/stats", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) throw new Error('Failed to fetch stats');
      const data = await res.json();
      setStats({
        totalStudents: data.totalStudents || 0,
        totalInternships: data.totalInternships || 0,
        totalInternshipsApplied: data.totalInternshipsApplied || 0,
        pendingApplications: data.pendingApplications || 0,
        acceptedApplications: data.acceptedApplications || 0,
        rejectedApplications: data.rejectedApplications || 0,
        completedApplications: data.completedApplications || 0, // Backend should compute: count of applications with status "Completed"
      });
    } catch (err) {
      console.error("Error fetching stats:", err);
    } finally {
      setIsLoadingStats(false);
    }
  };

  // Enhanced Stats Card Component with Animations
  const StatsCard = ({ title, count, color, icon: customIcon, delay = 0, isLoading = false }) => {
    const icons = {
      totalStudents: <FaUsers className="text-4xl" />,
      totalInternships: 'üíº',
      totalInternshipsApplied: 'üìã',
      pendingApplications: '‚è≥',
      acceptedApplications: '‚úÖ',
      rejectedApplications: '‚ùå',
      completedApplications: <FaGraduationCap className="text-4xl" />, // Icon for completed (graduation cap)
    };

    if (isLoading) {
      return (
        <div className="bg-white p-4 md:p-6 rounded-xl shadow-md border border-gray-200 animate-pulse overflow-hidden">
          <div className="h-8 bg-gradient-to-r from-gray-200 to-gray-300 rounded w-16 mb-2 animate-pulse"></div>
          <div className="h-6 bg-gradient-to-r from-gray-200 to-gray-300 rounded w-20 animate-pulse"></div>
        </div>
      );
    }

    const icon = customIcon || icons[title.toLowerCase().replace(/\s+/g, '')] || 'üìä';

    return (
      <div
        className={`bg-white p-4 md:p-6 rounded-xl shadow-md border border-gray-200 hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 overflow-hidden group animate-[fade-in-up_0.6s_ease-out] ${delay ? `animate-delay-${delay}` : ''}`}
        style={{ animationDelay: `${delay}ms` }}
      >
        <div className="relative">
          <div className={`text-4xl mb-3 opacity-0 group-hover:opacity-100 transition-all duration-500 transform group-hover:scale-110 group-hover:rotate-12 ${color === 'blue' ? 'text-blue-500' : color === 'green' ? 'text-green-500' : color === 'indigo' ? 'text-indigo-500' : color === 'yellow' ? 'text-yellow-500' : color === 'red' ? 'text-red-500' : color === 'purple' ? 'text-purple-500' : 'text-gray-500'}`}>
            {typeof icon === 'string' ? icon : icon}
          </div>
          <div className={`text-3xl md:text-4xl font-bold text-gray-800 mb-2 animate-count-up group-hover:text-gray-900 ${color === 'blue' ? 'text-blue-600' : color === 'green' ? 'text-green-600' : color === 'indigo' ? 'text-indigo-600' : color === 'yellow' ? 'text-yellow-600' : color === 'red' ? 'text-red-600' : color === 'purple' ? 'text-purple-600' : 'text-gray-600'}`}>
            {count.toLocaleString()}
          </div>
          <div className={`absolute inset-0 bg-gradient-to-r ${color === 'blue' ? 'from-blue-500/20' : color === 'green' ? 'from-green-500/20' : color === 'indigo' ? 'from-indigo-500/20' : color === 'yellow' ? 'from-yellow-500/20' : color === 'red' ? 'from-red-500/20' : color === 'purple' ? 'from-purple-500/20' : 'from-gray-500/20'} opacity-0 group-hover:opacity-100 transition-opacity duration-700`}></div>
          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -skew-x-12 transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000 ease-out"></div>
        </div>
        <h3 className={`text-gray-700 font-semibold group-hover:text-gray-900 transition-colors duration-300 text-sm md:text-base`}>
          {title}
        </h3>
      </div>
    );
  };

  // Render page content
  const renderPage = () => {
    switch (activePage) {
      case "manageStudents":
        return <ManageStudents />;
      case "applications":
        return <ApplicationsReview />;
      case "reports":
        return <Reports />;
      case "logout":
        handleLogout();
        return null;
      default:
        return (
          <div className="p-4 md:p-6 animate-slide-down">
            <h1 className="text-2xl md:text-3xl lg:text-4xl font-bold text-gray-800 mb-6 bg-gradient-to-r from-blue-600 to-indigo-700 bg-clip-text text-transparent animate-[fade-in-up_0.8s_ease-out] animate-float">
              Welcome, Admin üëã
            </h1>
            <div className="stats-section grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6 mb-8"> {/* Adjusted for 7 cards */}
              {isLoadingStats ? (
                <>
                  <StatsCard title="Total Students" count={0} color="blue" isLoading={true} delay={0} />
                  <StatsCard title="Total Internships" count={0} color="green" isLoading={true} delay={100} />
                  <StatsCard title="Total Internships Applied" count={0} color="indigo" isLoading={true} delay={200} />
                  <StatsCard title="Pending Applications" count={0} color="yellow" isLoading={true} delay={300} />
                  <StatsCard title="Accepted Applications" count={0} color="green" isLoading={true} delay={400} />
                  <StatsCard title="Rejected Applications" count={0} color="red" isLoading={true} delay={500} />
                  <StatsCard title="Completed Applications" count={0} color="purple" isLoading={true} delay={600} />
                </>
              ) : (
                <>
                  <StatsCard title="Total Students" count={stats.totalStudents} color="blue" delay={0} />
                  <StatsCard title="Total Internships" count={stats.totalInternships} color="green" delay={100} />
                  <StatsCard title="Total Internships Applied" count={stats.totalInternshipsApplied} color="indigo" delay={200} />
                  <StatsCard title="Pending Applications" count={stats.pendingApplications} color="yellow" delay={300} />
                  <StatsCard title="Accepted Applications" count={stats.acceptedApplications} color="green" delay={400} />
                  <StatsCard title="Rejected Applications" count={stats.rejectedApplications} color="red" delay={500} />
                  <StatsCard title="Completed Applications" count={stats.completedApplications} color="purple" delay={600} icon={<FaGraduationCap className="text-4xl" />} />
                </>
              )}
            </div>
          </div>
        );
    }
  };

  return (
    <div className="h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex flex-col md:flex-row overflow-hidden">
      {/* Mobile Overlay Backdrop */}
      {isMenuOpen && (
        <div 
          className="fixed inset-0 bg-black/50 z-40 md:hidden animate-fade-in" 
          onClick={closeMenu}
          aria-hidden="true"
        />
      )}

      {/* Sidebar */}
      <aside 
        className={`
          fixed md:static top-0 left-0 h-full w-64 bg-white shadow-xl z-50 transform transition-transform duration-300 ease-in-out
          ${isMenuOpen ? 'translate-x-0' : '-translate-x-full'} md:translate-x-0
          overflow-y-auto animate-slide-in-right
        `}
      >
        {/* Sidebar Header */}
        <div className="p-4 bg-gradient-to-b from-blue-600 to-indigo-700 text-white sticky top-0 z-10 animate-[fade-in-up_0.6s_ease-out]">
          <h2 className="text-xl font-bold animate-slide-up">Admin Panel</h2>
          <p className="text-blue-100 text-sm mt-1 animate-slide-up" style={{ animationDelay: '0.2s' }}>PM Internship</p>
        </div>

        {/* Sidebar Links */}
        <ul className="p-3 space-y-1 mt-2">
          {[
            { id: "home", label: "Dashboard", icon: FaHome, page: "home" },
            { id: "manageStudents", label: "Manage Students", icon: FaUsers, page: "manageStudents" },
            { id: "applications", label: "Applications Review", icon: FaClipboardList, page: "applications" },
            { id: "reports", label: "Reports", icon: FaChartBar, page: "reports" },
            { id: "logout", label: "Logout", icon: FaSignOutAlt, page: "logout" }
          ].map((item, index) => (
            <li key={item.id} className="animate-[fade-in-up_0.6s_ease-out]" style={{ animationDelay: `${index * 100}ms` }}>
              <div 
                className={`flex items-center p-2 rounded-lg cursor-pointer transition-all duration-300 font-medium transform hover:scale-105 group ${
                  activePage === item.page 
                    ? "bg-blue-50 text-blue-600 shadow-md" 
                    : "text-gray-700 hover:bg-blue-50 hover:text-blue-600 hover:shadow-lg"
                }`}
                onClick={() => { setActivePage(item.page); if (item.page === "logout") handleLogout(); closeMenu(); }}
                role="button"
                tabIndex={0}
                onKeyDown={(e) => e.key === 'Enter' && setActivePage(item.page)}
              >
                <item.icon className="mr-3 text-lg group-hover:rotate-12 transition-transform duration-300" />
                <span className="group-hover:underline">{item.label}</span>
              </div>
            </li>
          ))}
        </ul>

        {/* Mobile Close Button */}
        <button
          onClick={closeMenu}
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 md:hidden transition-all duration-200 hover:rotate-90"
          aria-label="Close menu"
        >
          <FaTimes className="text-xl" />
        </button>
      </aside>

      {/* Main Content */}
      <div className="flex-1 flex flex-col md:ml-0 h-full overflow-hidden w-full">
        {/* Header */}
        <header className="bg-white shadow-sm border-b border-gray-200 p-3 md:p-4 flex items-center justify-between sticky top-0 z-30 flex-shrink-0 animate-slide-down">
          <div className="flex items-center space-x-3 md:space-x-4">
            {/* Hamburger Menu Button (Mobile Only) */}
            <button
              onClick={toggleMenu}
              className="md:hidden text-gray-600 hover:text-blue-600 transition-all duration-300 p-1 md:p-2 rounded-lg hover:bg-gray-100 hover:rotate-180"
              aria-label={isMenuOpen ? "Close menu" : "Open menu"}
              aria-expanded={isMenuOpen}
            >
              {isMenuOpen ? <FaTimes className="text-xl" /> : <FaBars className="text-xl" />}
            </button>
            <h1 className="text-xl md:text-2xl lg:text-3xl font-bold text-gray-800 bg-gradient-to-r from-blue-600 to-indigo-700 bg-clip-text text-transparent animate-[fade-in-up_0.6s_ease-out]">
              Admin Dashboard
            </h1>
          </div>
          {/* Optional: Add notification or profile button here if needed */}
        </header>

        {/* Sub-pages will render here */}
        <main className="flex-1 overflow-y-auto p-2 md:p-4">
          {renderPage()}
        </main>
      </div>

      {/* Custom CSS for Enhanced Animations */}
      <style jsx>{`
        @keyframes fade-in-up {
          from { opacity: 0; transform: translateY(30px); }
          to { opacity: 1; transform: translateY(0); }
        }
        @keyframes slide-in-right {
          from { opacity: 0; transform: translateX(-100%); }
          to { opacity: 1; transform: translateX(0); }
        }
        @keyframes count-up {
          from { opacity: 0; transform: scale(0.8) rotate(-5deg); }
          to { opacity: 1; transform: scale(1) rotate(0deg); }
        }
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          25% { transform: translateX(-5px); }
          75% { transform: translateX(5px); }
        }
        @keyframes pulse-glow {
          0%, 100% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.3); }
          50% { box-shadow: 0 0 40px rgba(59, 130, 246, 0.6); }
        }
        @keyframes float {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-10px); }
        }
        @keyframes slide-down {
          from { opacity: 0; transform: translateY(-10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        @keyframes fade-in {
          from { opacity: 0; }
          to { opacity: 1; }
        }
        @keyframes slide-up {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }
        .animate-[fade-in-up_0.6s_ease-out] { animation: fade-in-up 0.6s ease-out forwards; }
        .animate-slide-in-right { animation: slide-in-right 0.4s ease-out; }
        .animate-count-up { animation: count-up 0.8s ease-out; }
        .animate-pulse-glow { animation: pulse-glow 2s infinite; }
        .animate-float { animation: float 3s ease-in-out infinite; }
        .animate-slide-down { animation: slide-down 0.3s ease-out; }
        .animate-fade-in { animation: fade-in 0.3s ease-out; }
        .animate-slide-up { animation: slide-up 0.5s ease-out; }
        .animate-delay-100 { animation-delay: 100ms; }
        .animate-delay-200 { animation-delay: 200ms; }
        .animate-delay-300 { animation-delay: 300ms; }
        .animate-delay-400 { animation-delay: 400ms; }
        .animate-delay-500 { animation-delay: 500ms; }
        .animate-delay-600 { animation-delay: 600ms; }
      `}</style>
    </div>
  );
}

export default AdminDashboard;